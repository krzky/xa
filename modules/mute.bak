import inputSanitization from "../sidekick/input-sanitization";
import Strings from "../lib/db";
import Client from "../sidekick/client.js";
import XA from "../sidekick/sidekick";
import format from "string-format";
import { MessageType } from "../sidekick/message-type";
import { proto } from "@adiwajshing/baileys";

const MUTE = Strings.mute;

module.exports = {
    name: "mute",
    description: MUTE.DESCRIPTION,
    extendedDescription: MUTE.EXTENDED_DESCRIPTION,
    demo: { isEnabled: true, text: [".mute", ".mute 10 s", ".mute 1 h"] },
    async handle(client: Client, chat: proto.IWebMessageInfo, XA: XA, args: string[]): Promise<void> {
        try {
            if (!XA.isGroup) {
                client.sendMessage(
                    XA.chatId,
                    MUTE.NOT_GROUP_CHAT,
                    MessageType.text
                ).catch(err => inputSanitization.handleError(err, client, XA));
                return;
            }
            await client.getGroupMetaData(XA.chatId, XA);
            if (!XA.isBotGroupAdmin) {
                client.sendMessage(
                    XA.chatId,
                    MUTE.NOT_ADMIN,
                    MessageType.text
                ).catch(err => inputSanitization.handleError(err, client, XA));
                return;
            }
            if (!args[0]) {
                const ok = await client.sock.chatModify(
                    { mute: 8*60*60*1000 },
                    XA.chatId
                ).catch(err => inputSanitization.handleError(err, client, XA));
                console.log(ok);
                client.sendMessage(
                    XA.chatId,
                    MUTE.CHAT_ADMIN_ONLY,
                    MessageType.text
                ).catch(err => inputSanitization.handleError(err, client, XA));
                return;
            } else if (parseInt(args[0]) === NaN) {
                client.sendMessage(
                    XA.chatId,
                    MUTE.MENTION_DURATION,
                    MessageType.text
                ).catch(err => inputSanitization.handleError(err, client, XA));
                return;
            }

            var duration: number = parseInt(args[0]);
            var type: string = "minutes";
            if (args[1] === "s") {
                duration = duration * 1000;
                type = "seconds";
            } else if (args[1] === "m") {
                duration = duration * 60 * 1000;
                type = "minutes";
            } else if (args[1] === "h") {
                duration = duration * 60 * 60 * 1000;
                type = "hours";
            } else {
                duration = duration * 60 * 1000; // default to minutes
            }

            await client.sock.chatModify(
                { mute: duration },
                XA.chatId
            );
            client.sendMessage(
                XA.chatId,
                "```Chat permissions changed to```  *admin only*  ```for " +
                    args[0] +
                    " " +
                    type +
                    ".```",
                MessageType.text
            ).catch(err => inputSanitization.handleError(err, client, XA));
            setTimeout(async () => {
                await client.sock.chatModify(
                    { mute: null },
                    XA.chatId
                ).catch(err => inputSanitization.handleError(err, client, XA));
                client.sendMessage(
                    XA.chatId,
                    MUTE.CHAT_ALL_MEMBERS,
                    MessageType.text
                ).catch(err => inputSanitization.handleError(err, client, XA));
            }, duration);
        } catch (err) {
            await inputSanitization.handleError(err, client, XA);
        }
    },
};
